#!/bin/sh
# set repo to avoid passing it on the commandline
export BORG_REPO='/run/media/markus/Backup/t480s'

# ask an external program to supply the passphrase
export BORG_PASSCOMMAND='pass show backup/t480s'

# notification helper
info() {
    echo "Backup: $1"
}

info 'Starting backup'

# backup given directories into an archive named after host and time
borg create                                             \
    --verbose                                           \
    --filter AME                                        \
    --list                                              \
    --stats                                             \
    --show-rc                                           \
    --compression zstd,10                               \
    --exclude-caches                                    \
    --exclude '*/.cache'                                \
    --exclude '*/cache'                                 \
    --exclude '*/tmp'                                   \
    --exclude '/home/*/node_modules'                    \
    --exclude '/home/markus/.vm'                        \
    --exclude '/home/markus/.local/share/gnome-boxes'   \
    --exclude '/var/lib/docker'                         \
    ::'{hostname}-{now}'                                \
    /etc                                                \
    /home                                               \
    /var

backup_exit=$?

info 'Pruning repository'

# Use the `prune` subcommand to maintain 1 daily, 1 weekly and 1 monthly
# archive of this machine. The '{hostname}-' prefix is very important to
# limit prune's operation to this machine's archives and not apply to
# other machines' archives also

borg prune                  \
    --list                  \
    --prefix '{hostname}-'  \
    --show-rc               \
    --keep-daily    1       \
    --keep-weekly   1       \
    --keep-monthly  1

prune_exit=$?

case ${prune_exit} in
    0) info 'Prune finished successfully';;
    1) info 'Prune finished with warnings';;
    *) info 'Prune finished with errors';;
esac

case ${backup_exit} in
    0) info 'Backup finished successfully';;
    1) info 'Backup finished with warnings';;
    *) info 'Backup finished with errors';;
esac

exit $(( backup_exit > prune_exit ? backup_exit : prune_exit ))

